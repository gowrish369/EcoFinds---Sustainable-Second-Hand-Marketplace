<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EcoFinds - Sustainable Second-Hand Marketplace</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .modal-backdrop {
            background-color: rgba(0,0,0,0.5);
        }
        .modal {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        .modal-content {
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        .form-input {
            @apply w-full bg-white border border-gray-300 text-gray-800 rounded-md p-3 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition;
        }
        .btn {
            @apply px-4 py-2 rounded-md font-semibold transition-all duration-300 flex items-center justify-center space-x-2;
        }
        .btn:disabled {
            @apply opacity-50 cursor-not-allowed;
        }
        .btn-primary {
            @apply bg-emerald-600 text-white hover:bg-emerald-700 shadow-lg shadow-emerald-600/30;
        }
        .btn-secondary {
            @apply bg-gray-200 text-gray-700 hover:bg-gray-300;
        }
        .product-card {
            @apply bg-white rounded-lg overflow-hidden shadow-lg hover:shadow-emerald-500/20 hover:scale-105 transition-all duration-300 border border-gray-200;
        }
        .eco-score {
            @apply text-lg font-bold text-emerald-500;
        }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #f0fdf4; }
        ::-webkit-scrollbar-thumb { background: #d1d5db; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #9ca3af; }
        .spinner {
            @apply w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin;
        }
        .toast {
            @apply fixed bottom-5 right-5 bg-emerald-600 text-white px-6 py-3 rounded-lg shadow-lg translate-y-20 opacity-0 transition-all duration-300 z-50;
        }
        .toast.show {
            @apply translate-y-0 opacity-100;
        }
        .toast.error {
            @apply bg-red-600;
        }
        .filter-btn {
            @apply px-4 py-2 text-sm font-medium text-gray-700 bg-white rounded-full hover:bg-emerald-600 hover:text-white transition-colors border border-gray-200;
        }
        .filter-btn.active {
            @apply bg-emerald-600 text-white border-emerald-600;
        }
    </style>
</head>
<body class="bg-green-50 text-gray-800">

    <!-- Loading Spinner -->
    <div id="loading-spinner" class="fixed inset-0 bg-green-50 flex items-center justify-center z-50">
        <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-emerald-500"></div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast-notification" class="toast"></div>

    <!-- Main App Container -->
    <div id="app-container" class="hidden">
        <header class="bg-white/80 backdrop-blur-sm sticky top-0 z-40 border-b border-gray-200">
            <nav class="container mx-auto px-4 py-3 flex justify-between items-center">
                <h1 class="text-2xl font-bold text-emerald-600">EcoFinds ðŸŒ¿</h1>
                <div class="flex items-center space-x-4">
                    <button id="sell-item-btn" class="btn btn-primary">
                        <i data-lucide="plus-circle" class="w-5 h-5"></i>
                        <span>Sell Item</span>
                    </button>
                    <div class="relative">
                         <div id="user-info" class="flex items-center space-x-2 p-2 bg-green-100 rounded-full">
                            <span class="w-8 h-8 rounded-full bg-emerald-500 text-white flex items-center justify-center font-bold text-sm" id="user-avatar"></span>
                            <span class="text-sm font-medium hidden md:block" id="user-email-display"></span>
                        </div>
                    </div>
                </div>
            </nav>
        </header>

        <main class="container mx-auto px-4 py-8">
            <div class="text-center mb-8">
                <h2 class="text-4xl font-bold tracking-tight text-gray-900">Find Sustainable Second-Hand Treasures</h2>
                <p class="text-lg text-gray-600 mt-2 max-w-2xl mx-auto">Buy and sell pre-loved items, and see the positive impact you're making on the planet.</p>
            </div>
            
            <!-- Daily Eco Tip -->
            <div id="eco-tip-container" class="mb-8 bg-emerald-100 border-l-4 border-emerald-500 text-emerald-800 p-4 rounded-r-lg flex items-center">
                <i data-lucide="lightbulb" class="w-8 h-8 mr-4 flex-shrink-0"></i>
                <p id="eco-tip-text" class="text-sm">Loading today's eco-tip...</p>
            </div>

             <!-- Search and Filter Controls -->
            <div class="bg-white/80 p-4 rounded-lg mb-8 sticky top-[70px] z-30 backdrop-blur-sm border border-gray-200">
                <div class="flex flex-col md:flex-row gap-4">
                    <input id="search-bar" type="text" placeholder="Search for items or city..." class="form-input flex-grow">
                    <select id="sort-select" class="form-input md:w-48">
                        <option value="newest">Sort by Newest</option>
                        <option value="price-asc">Price: Low to High</option>
                        <option value="price-desc">Price: High to Low</option>
                    </select>
                </div>
                <div id="category-filters" class="flex flex-wrap gap-2 mt-4">
                    <button class="filter-btn active" data-category="all">All</button>
                    <button class="filter-btn" data-category="clothing">Clothing</button>
                    <button class="filter-btn" data-category="electronics">Electronics</button>
                    <button class="filter-btn" data-category="furniture">Furniture</button>
                    <button class="filter-btn" data-category="books">Books</button>
                    <button class="filter-btn" data-category="other">Other</button>
                </div>
            </div>

            <!-- Products Grid -->
            <div id="product-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                <!-- Product cards will be injected here -->
            </div>
        </main>
    </div>

    <!-- Sell Item Modal -->
    <div id="sell-item-modal" class="modal fixed inset-0 z-50 hidden items-center justify-center p-4 opacity-0 -translate-y-10">
        <div class="modal-backdrop fixed inset-0"></div>
        <div class="modal-content bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto relative z-10 p-6 md:p-8">
            <button id="close-sell-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800">
                <i data-lucide="x" class="w-6 h-6"></i>
            </button>
            <h3 class="text-2xl font-bold mb-6 text-gray-900">List a New Item</h3>
            <form id="sell-item-form">
                <div class="space-y-4">
                     <div class="relative">
                        <input type="url" id="item-image" class="form-input" placeholder="Paste Image URL to auto-fill..." required>
                         <button type="button" id="analyze-image-url-btn" class="absolute top-1/2 -translate-y-1/2 right-2 btn bg-emerald-600 hover:bg-emerald-700 text-white text-xs py-1 px-2">
                               âœ¨ Analyze
                         </button>
                    </div>
                    <input type="text" id="item-title" class="form-input" placeholder="Item Title (e.g., Vintage Denim Jacket)" required>
                    <div class="relative">
                        <textarea id="item-description" class="form-input" placeholder="Describe your item..." rows="4" required></textarea>
                        <button type="button" id="generate-description-btn" class="absolute bottom-2 right-2 btn bg-emerald-600 hover:bg-emerald-700 text-white text-xs py-1 px-2">
                           âœ¨ Generate
                        </button>
                    </div>
                    <div class="flex gap-4">
                        <div class="relative flex-grow">
                            <input type="number" id="item-price" class="form-input" placeholder="Price (â‚¹)" min="0" step="0.01" required>
                            <button type="button" id="generate-price-btn" class="absolute top-1/2 -translate-y-1/2 right-2 btn bg-emerald-600 hover:bg-emerald-700 text-white text-xs py-1 px-2">
                               âœ¨ Suggest
                            </button>
                        </div>
                        <input type="text" id="item-city" class="form-input flex-grow" placeholder="City (e.g., Ballari)" value="Ballari" required>
                    </div>
                    <select id="item-category" class="form-input" required>
                        <option value="" disabled selected>Select a Category</option>
                        <option value="clothing">Clothing & Apparel</option>
                        <option value="electronics">Electronics</option>
                        <option value="furniture">Furniture</option>
                        <option value="books">Books</option>
                        <option value="other">Other</option>
                    </select>

                    <div class="border-t border-gray-200 pt-4">
                        <h4 class="text-lg font-semibold text-emerald-600 mb-2">ðŸŒ¿ Calculate Eco Score</h4>
                        <p class="text-sm text-gray-500 mb-4">Help buyers understand the sustainability of your item.</p>
                        <div class="space-y-4">
                            <select id="item-material" class="form-input">
                                <option value="1">Material: Natural/Organic</option>
                                <option value="2">Material: Recycled/Upcycled</option>
                                <option value="3">Material: Mixed/Synthetic</option>
                                <option value="0">Material: Plastic/Low-grade</option>
                            </select>
                             <select id="item-age" class="form-input">
                                <option value="2">Age: > 5 years (Vintage)</option>
                                <option value="1">Age: 1-5 years</option>
                                <option value="0">Age: < 1 year</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="mt-8 flex justify-end">
                    <button type="submit" class="btn btn-primary">List My Item</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Product Detail Modal -->
    <div id="product-detail-modal" class="modal fixed inset-0 z-50 hidden items-center justify-center p-4 opacity-0 -translate-y-10">
        <div class="modal-backdrop fixed inset-0"></div>
        <div id="product-detail-content" class="modal-content bg-white text-gray-800 rounded-lg w-full max-w-3xl max-h-[90vh] overflow-y-auto relative z-10">
             <!-- Content will be injected here -->
        </div>
    </div>


    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, query, onSnapshot, doc, getDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = typeof __firebase_config !== 'undefined' 
            ? JSON.parse(__firebase_config) 
            : { apiKey: "AIza...", authDomain: "...", projectId: "..." };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-ecofinds-app';

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- DOM Elements ---
        const loadingSpinner = document.getElementById('loading-spinner');
        const appContainer = document.getElementById('app-container');
        const productGrid = document.getElementById('product-grid');
        const sellItemBtn = document.getElementById('sell-item-btn');
        const sellItemModal = document.getElementById('sell-item-modal');
        const closeSellModalBtn = document.getElementById('close-sell-modal-btn');
        const sellItemForm = document.getElementById('sell-item-form');
        const productDetailModal = document.getElementById('product-detail-modal');
        const productDetailContent = document.getElementById('product-detail-content');
        const searchBar = document.getElementById('search-bar');
        const generateDescriptionBtn = document.getElementById('generate-description-btn');
        const generatePriceBtn = document.getElementById('generate-price-btn');
        const analyzeImageUrlBtn = document.getElementById('analyze-image-url-btn');
        const toast = document.getElementById('toast-notification');
        const categoryFilters = document.getElementById('category-filters');
        const sortSelect = document.getElementById('sort-select');
        const ecoTipText = document.getElementById('eco-tip-text');
        
        let currentUser = null;
        let allProducts = [];
        let samplesAdded = false;
        let currentFilters = { search: '', category: 'all', sort: 'newest' };

        // --- Toast Notification Function ---
        function showToast(message, isError = false) {
            toast.textContent = message;
            toast.className = `toast show ${isError ? 'error' : ''}`;
            setTimeout(() => { toast.classList.remove('show'); }, 3000);
        }

        // --- Gemini API Function ---
        async function callGemini(prompt, buttonElement) {
            const originalButtonContent = buttonElement ? buttonElement.innerHTML : null;
            if (buttonElement) {
                buttonElement.disabled = true;
                buttonElement.innerHTML = `<div class="spinner"></div>`;
            }
            try {
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                const payload = { contents: [{ parts: [{ text: prompt }] }] };
                let response;
                let retries = 3, delay = 1000;
                while (retries > 0) {
                    try {
                        response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                        if (response.ok) {
                            const result = await response.json();
                            const candidate = result.candidates?.[0];
                            if (candidate?.content?.parts?.[0]?.text) return candidate.content.parts[0].text;
                            throw new Error("Invalid response structure.");
                        } else if (response.status === 429 || response.status >= 500) {
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2;
                            retries--;
                        } else { throw new Error(`API call failed with status ${response.status}`); }
                    } catch (error) {
                        console.error("Error calling Gemini API:", error);
                        retries--;
                        if (retries <= 0) return "Sorry, I couldn't generate a response.";
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                    }
                }
                return "Request failed after multiple retries.";
            } finally {
                 if (buttonElement) {
                    buttonElement.disabled = false;
                    buttonElement.innerHTML = originalButtonContent;
                }
            }
        }

        // --- Eco Tip Feature ---
        async function fetchEcoTip() {
            const cachedTip = sessionStorage.getItem('ecoTip');
            if (cachedTip) {
                ecoTipText.textContent = cachedTip;
                lucide.createIcons();
                return;
            }
            const prompt = "Give me a short, actionable sustainability tip for people living in India. Make it encouraging and under 150 characters. For example: 'Carry a reusable cloth bag when you go shopping to avoid single-use plastic bags!'";
            const tip = await callGemini(prompt, null);
            ecoTipText.textContent = tip;
            sessionStorage.setItem('ecoTip', tip);
            lucide.createIcons();
        }

        // --- Authentication ---
        onAuthStateChanged(auth, (user) => {
            if (user) {
                currentUser = user;
                const isGuest = user.isAnonymous || !user.email;
                document.getElementById('user-email-display').textContent = isGuest ? 'Guest User' : user.email;
                document.getElementById('user-avatar').textContent = isGuest ? 'G' : user.email.charAt(0).toUpperCase();
                appContainer.classList.remove('hidden');
                loadingSpinner.classList.add('hidden');
                fetchProducts();
                fetchEcoTip();
            } else { currentUser = null; }
        });
        
        async function initializeAuth() {
            try {
                if (typeof __initial_auth_token !== 'undefined') await signInWithCustomToken(auth, __initial_auth_token);
                else await signInAnonymously(auth);
            } catch(error) {
                console.error("Authentication failed:", error);
                loadingSpinner.innerHTML = `<p class="text-red-500">Authentication Failed.</p>`;
            }
        }

        // --- Product Functions ---
        const productsCollectionRef = collection(db, `artifacts/${appId}/public/data/products`);
        
        async function addSampleProducts() {
            if (samplesAdded) return;
            samplesAdded = true; 
            const sampleProducts = [
                { title: 'Vintage Silk Saree', description: 'A beautiful, gently used Banarasi silk saree with intricate gold zari work.', price: 4500, imageUrl: 'https://images.unsplash.com/photo-1621057279336-959cbf39545e?q=80&w=2574&auto=format&fit=crop', category: 'clothing', ecoScore: 4, city: 'Ballari', sellerId: 'system', createdAt: new Date() },
                { title: 'Used OnePlus 7 Pro', description: 'A well-maintained OnePlus 7 Pro, Nebula Blue, 8GB RAM, 256GB storage.', price: 15000, imageUrl: 'https://images.unsplash.com/photo-1598327105553-6939ef417204?q=80&w=2670&auto=format&fit=crop', category: 'electronics', ecoScore: 3, city: 'Bengaluru', sellerId: 'system', createdAt: new Date() },
                { title: 'The Palace of Illusions Novel', description: 'Paperback copy in excellent condition. A fantastic read!', price: 150, imageUrl: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?q=80&w=2574&auto=format&fit=crop', category: 'books', ecoScore: 5, city: 'Ballari', sellerId: 'system', createdAt: new Date() },
                { title: 'Wooden Coffee Table', description: 'Solid Sheesham wood coffee table. Has a few minor scratches but is very sturdy.', price: 2200, imageUrl: 'https:/